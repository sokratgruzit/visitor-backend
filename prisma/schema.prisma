generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EmailVerification {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  name              String?
  password          String
  refreshToken      String?
  emailVerified     Boolean             @default(false)
  emailVerifications EmailVerification[]
  subscriptionStatus String?            @default("inactive") 
  yooPaymentId       String?  
  landing           Landing?
  promoCode         PromoCode?          @relation(fields: [promoCodeId], references: [id])
  promoCodeId       Int?
  subscriptionEndAt DateTime?
  yooSubscriptionId String?
  isAdmin           Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  animations Animation[]
  createdVotings Voting[] @relation("VotingCreator")
  votes          Vote[]   @relation("UserVotes")
}

model Landing {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  data      Json
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PromoCode {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  description String?
  discountPct Int?
  bonusDays   Int?
  customType  String?
  usageLimit  Int?
  usedCount   Int       @default(0)
  expiresAt   DateTime?
  active      Boolean   @default(true)

  marketer    Marketer? @relation(fields: [marketerId], references: [id])
  marketerId  Int?

  users       User[]    // обратная связь на юзеров

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Marketer {
  id         Int         @id @default(autoincrement())
  name       String
  email      String      @unique
  promoCodes PromoCode[] // все коды, созданные маркетологом
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Voting {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  creatorId   Int
  creator     User     @relation("VotingCreator", fields: [creatorId], references: [id])
  level       Int
  amount      Int      @default(0) // сумма голосов
  status      String   @default("pending")
  createdAt   DateTime @default(now())

  votes       Vote[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  userId    Int
  votingId  Int
  amount    Int
  createdAt DateTime @default(now())

  user   User   @relation("UserVotes", fields: [userId], references: [id])
  voting Voting @relation(fields: [votingId], references: [id])
}

model Animation {
  id        Int      @id @default(autoincrement())
  userId    Int?
  name      String
  status    String   @default("draft")
  data      Json
  fileUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])
}
